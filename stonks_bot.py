#!/usr/bin/env python
# coding: utf-8

# In[ ]:


from telegram import Update
import logging
import sys
import pandas as pd
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater
from telegram.ext import CallbackContext
from telegram.ext import CallbackQueryHandler
from telegram.ext import Filters, ConversationHandler, RegexHandler
from telegram.ext import MessageHandler
from telegram.ext import CommandHandler
import datetime
import requests
from forecaster import *

API_KEY_STOCKS = '7d15a0d24a2f5bd2efd71c393a73cfff'
API_KEY_NEWS = 'd033c9b32e714768818a5da1e8c285c4'
TOKEN = '1792902566:AAG_loiMwPNJutr_tYWXbCtRGfuOofFtLZA'
IMAGES_PATH = 'Media/'
CSV_PATH = 'Data/'

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


def start_handler(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text="""
    –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–∏ —Å—Ç–æ–∫–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ –∞–∫—Ü–∏–π.
    –Ø –º–æ–≥—É:
    - –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—É –∞–∫—Ü–∏–∏;
    - –æ—Ü–µ–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–π;
    - –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ç–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.

    –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–±–ª—é–¥–∞—Ç—å. 
    –ï—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ª—é–±–∏–º—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_new_ticker <–ò–º—è —Ç–∏–∫–µ—Ä–∞>.
    –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å —Ç–∏–∫–µ—Ä, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –ø–æ–∏—Å–∫–æ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /find_ticker <–ò–º—è —Ç–∏–∫–µ—Ä–∞>.

    /find_ticker  <–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏> - –ò—â–µ—Ç –ø–æ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –±–∏—Ä–∂–µ–≤–æ–π —Ç–∏–∫–µ—Ä.
    /add_new_ticker <–¢–∏–∫–µ—Ä> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.
    /show_favorite_tickers - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
    /delete_ticker <–¢–∏–∫–µ—Ä> –£–¥–∞–ª—è–µ—Ç —Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.
    /get_news <–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π> - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)
    /get_prediction <–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π>. –í–º–µ—Å—Ç–æ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–æ favorite –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–π. 

    """)


def find_companies(search_query: str) -> list:
    query = f"https://financialmodelingprep.com/api/v3/search?query={search_query}&limit=10&apikey={API_KEY_STOCKS}"
    result = requests.get(query)
    return result.json()

    
def find_ticker(update: Update, context: CallbackContext):
    company_name = context.args[0]
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ò—â—É –∫–æ–º–ø–∞–Ω–∏—é {company_name}. –ú–∏–Ω—É—Ç–æ—á–∫—É...")
    try:
        companies_list = find_companies(company_name)
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É {company_name} –Ω–∞—à–ª–æ—Å—å {len(companies_list)} –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.")
        for company in companies_list:
            text = """–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏ : {} \n 
                      –¢–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ : {} \n
                      –¢–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ –±–∏—Ä–∂–µ {} \n
                      –í–∞–ª—é—Ç–∞ : {}
                      """.format(company['name'],
                                 company['symbol'],
                                 company['stockExchange'],
                                 company['currency'])
            context.bot.send_message(chat_id=update.effective_chat.id, text=text
                                     )
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–∏–∫–µ—Ä –∏ –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ª—é–±–∏–º—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã add_new_ticker <–ò–º—è —Ç–∏–∫–µ—Ä–∞>.")
    except:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É {company_name} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                                 )


def add_new_ticker(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    db_tickers = pd.read_csv(CSV_PATH + 'favorite_tickers.csv', index_col=0)
    if len(context.args) > 0:
        today = datetime.datetime.today().strftime('%m/%d/%Y')
        lastweek = (datetime.datetime.today() - datetime.timedelta(days=7)).strftime('%m/%d/%Y')
        ticker = context.args[0]
        logging.info(f'ticker-{ticker}')
        try:
            data = get_data(ticker, start_date=lastweek, end_date=today, index_as_date=True, interval="1d")
            logging.info(f'–†–∞–∑–º–µ—Ä –±–¥ - {db_tickers.shape}')
            db_tickers = db_tickers.append({'chat_id': chat_id, 'ticker': ticker}, ignore_index=True)
            db_tickers.to_csv(CSV_PATH + 'favorite_tickers.csv')
            logging.info(f'–†–∞–∑–º–µ—Ä –±–¥ - {db_tickers.shape}')
            context.bot.send_message(chat_id=chat_id,
                                     text=f"–¢–∏–∫–µ—Ä {ticker} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.")
        except:
            context.bot.send_message(chat_id=chat_id,
                                     text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä AMZN.üòä")
    else:
        context.bot.send_message(chat_id=chat_id,
                                 text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_new_ticker")

def create_table():
    try:
        db_tickers = pd.read_csv(CSV_PATH + 'favorite_tickers.csv', index_col=0)
        logger.info(f'Table favorite_tickers found. Shape - {db_tickers.shape}')
    except:
        logger.info(f'Creating new favorite_tickers table')
        db_tickers = pd.DataFrame()
        db_tickers = pd.DataFrame({'chat_id': [], 'ticker': []})
        db_tickers.to_csv(CSV_PATH + 'favorite_tickers.csv')


def show_favorite_tickers(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    db_tickers = pd.read_csv(CSV_PATH + 'favorite_tickers.csv', index_col=0)
    list_favorite = list(db_tickers[db_tickers['chat_id'] == chat_id]['ticker'].unique())
    if len(list_favorite) == 0:
        context.bot.send_message(chat_id=chat_id, text="–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ üôÅ.")
    else:
        context.bot.send_message(chat_id=chat_id, text="–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: ")
    for favorite in list_favorite:
        context.bot.send_message(chat_id=chat_id, text=favorite)


def delete_ticker(update: Update, context: CallbackContext):
    db_tickers = pd.read_csv(CSV_PATH + 'favorite_tickers.csv', index_col=0)
    chat_id = update.effective_chat.id
    if len(context.args) > 0:
        ticker = context.args[0]
        try:
            db_tickers.drop(db_tickers[(db_tickers['chat_id'] == chat_id) & (db_tickers['ticker'] == ticker)].index,
                            inplace=True)
            db_tickers.to_csv(CSV_PATH + 'favorite_tickers.csv')
            context.bot.send_message(chat_id=chat_id, text=f"–¢–∏–∫–µ—Ä {ticker} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.")
        except:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"–¢–∏–∫–µ—Ä {ticker} –æ—Ç—Å—É—Ç—Å–≤–æ–≤–∞–ª –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete_ticker")


def get_news_articles(search_string, delay=10) -> list:
    since_date = (datetime.datetime.today() - datetime.timedelta(days=delay)).strftime('%Y-%m-%d')
    query = f"https://newsapi.org/v2/everything?q={search_string}&from={since_date}&pageSize=5&sortBy=popularity&apiKey={API_KEY_NEWS}"
    try:
        result = requests.get(query)
        return result.json()['articles']
    except:
        return []


def get_news(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    while True:
        if len(context.args) > 0:
            company_name = context.args[0]
            if len(context.args) > 1:
                try:
                    if int(context.args[1]) > 0:
                        delay = str(context.args[1])
                    else:
                        logger.info(f'Digit is non positive')
                        context.bot.send_message(chat_id=chat_id,
                                                 text=f"–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π> –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                        break
                except:
                    context.bot.send_message(chat_id=chat_id,
                                             text=f"–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π> –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    break
            else:
                delay = '10'
            news_list = get_news_articles(company_name, int(delay))
            if len(news_list) == 0:
                logger.info(f'No news for search')
                context.bot.send_message(chat_id=chat_id,
                                         text=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É {company_name} –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏–∫–∞–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {delay} –¥–Ω–µ–π.")
                break
            else:
                context.bot.send_message(chat_id=chat_id, text=f"–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {delay} –¥–Ω–µ–π.")
                for news in news_list:
                    text = """–ù–æ–≤–æ—Å—Ç—å : {} \n 
                                  –°—Å—ã–ª–∫–∞ : {} \n
                                  –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {} \n
                                  """.format(news['title'],
                                             news['url'],
                                             news['publishedAt'])

                    context.bot.send_message(chat_id=chat_id, text=text)

        else:
            context.bot.send_message(chat_id=chat_id,
                                     text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /get_news")
        break

        
def get_prediction(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    today = datetime.datetime.today().strftime('%m/%d/%Y')
    lastweek = (datetime.datetime.today() - datetime.timedelta(days=7)).strftime('%m/%d/%Y')
    tickers = []
    db_tickers = pd.read_csv(CSV_PATH + 'favorite_tickers.csv', index_col=0)
    while True:
        if len(context.args) > 0:
            if context.args[0] == 'favorite':
                for ticker in list(db_tickers[db_tickers['chat_id'] == chat_id]['ticker'].unique()):
                    tickers.append(ticker)
            else:
                tickers.append(context.args[0])
                try:
                    data = get_data(tickers[0], start_date=lastweek, end_date=today, index_as_date=True, interval="1d")
                except:
                    context.bot.send_message(chat_id=chat_id,
                                             text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ —Å–ª–æ–≤–æ favorite –¥–ª—è –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π.")
                    break
            if len(context.args) > 1:
                try:
                    if int(context.args[1]) > 0:
                        horizont = str(context.args[1])
                    else:
                        context.bot.send_message(chat_id=chat_id,
                                                 text=f"–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π> –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                        break
                except:
                    context.bot.send_message(chat_id=chat_id,
                                             text=f"–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π> –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    break
            else:
                horizont = '30'
            for ticker in tickers:
                forecast = make_prediction(ticker, int(horizont))
                predicted_price = forecast.tail(1)['yhat'].values[0]
                current_price = forecast[forecast['y'].isna() == False].tail(1)['yhat'].values[0]
                price_change = round((predicted_price - current_price) / current_price * 100, 2)
                context.bot.send_message(chat_id=chat_id,
                                         text=f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {ticker} –∑–∞ {horizont} –¥–Ω–µ–π —Å–æ—Å—Ç–∞–≤–∏—Ç {price_change} %.')
                create_forecast_picture(forecast, ticker, horizont, chat_id)
                context.bot.send_photo(chat_id=chat_id,
                                       photo=open(f'{IMAGES_PATH}chat_{chat_id}_prediction_{ticker}.png', 'rb'))
        else:
            context.bot.send_message(chat_id=chat_id,
                                     text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /get_prediction –∏–ª–∏ —Å–ª–æ–≤–æ favorite –¥–ª—è –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π.")
        break
        

def create_forecast_picture(forecast, ticker, horizont, chat_id):
    now = datetime.datetime.today()
    tmp = forecast[(forecast['ds'] > (now - datetime.timedelta(days=14)))]
    fig, ax = plt.subplots(figsize=(8, 6))
    ax.plot('ds', 'yhat_upper', data=tmp, marker='', color='blue', linewidth=2, linestyle='dashed', label="upper")
    ax.plot('ds', 'yhat_lower', data=tmp, marker='', color='blue', linewidth=2, linestyle='dashed', label="lower")
    ax.plot('ds', 'y', data=tmp, marker='', color='red', linewidth=2)
    ax.plot('ds', 'yhat', data=tmp, marker='o', color='blue', linewidth=3)
    ax.fill_between('ds', 'yhat_upper', 'yhat_lower', alpha=0.2, data=tmp)
    ax.set_title(f'–ü—Ä–æ–≥–Ω–æ–∑ {ticker} –Ω–∞ {horizont} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥')
    plt.legend()
    plt.savefig(f'{IMAGES_PATH}chat_{chat_id}_prediction_{ticker}.png')


def main():
    updater = Updater(
        token=TOKEN,
        use_context=True
    )
    print(updater.bot.get_me())

    create_table()

    updater.dispatcher.add_handler(CommandHandler("start", start_handler))
    updater.dispatcher.add_handler(CommandHandler('find_ticker', find_ticker))
    updater.dispatcher.add_handler(CommandHandler('show_favorite_tickers', show_favorite_tickers))
    updater.dispatcher.add_handler(CommandHandler('add_new_ticker', add_new_ticker))
    updater.dispatcher.add_handler(CommandHandler('get_news', get_news))
    updater.dispatcher.add_handler(CommandHandler('delete_ticker', delete_ticker))
    updater.dispatcher.add_handler(CommandHandler('get_prediction', get_prediction))

    logging.info('Starting')
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()


# In[ ]:




